-*- outline -*-

* SSP::instantiate_outputs()
Rather than having $output->{service_name}, we should have the
service_name on the outputclasses, because solverclasses also have
service_name.  Likely the same for inputs.  This unifies inputs,
outputs and solvers more.

* services, solverclasses and events
** what it should be:
*** case 1: event delivery to an ascii file
**** event_2_ascii is an output solver.
**** heccer is a mathematical solver.
*** case 2: internal event delivery
**** event_distributor is a topology solver
**** event_queuer is an informatics solver
**** heccer is a mathematical solver.
**** event_2_ascii is an output solver.
** current discrepancies:
*** case 1:
**** why is there a event_distributor?
The following reasons might be true or not:

1) Because the model container can have only one solver per component.
That should be solved first: spike fields should be mappable to
separate solvers.

2) Perhaps also because the output object saves a value for every call
to its output function.

** suggested solutions:
*** case 1:
**** struct MatsEventGenerate
Has a dSpike field that is set to 0 except for those time steps a
spike has been generated.  This field is addressable.
**** output object
Add some logic to the output object such that it only emits values
that are different from 0.
**** other
This removes the necessity to have an event_distributor for case 1.

* add entries to $schedule->{history}
** user descriptions that describe why and what was done.
** software components that track everything done.

* perl packages for input/output
separate files for import - construct - save config.
** SSP::Input
** SSP::Output

* put version information in schedule
** components used (model-container, ssp, heccer)
** model checksum ?

* pause method
Implement tests for this one.

* user notifications
** use the method 'shell'
see example yaml/purkinje/edsjb1994-perfectclamp.yml
to email someone at the end of the simulation.

* the neurospaces-studio option
does not work together with the cell builtin.

* have a facility to monitor progress

* have ssp take as default model one called 'main'
unless overriden by options.

* Add appropriate copyright messages to all files.

* rename
in SSP.pm: service_name to model_container.

* the tests/tests directory is part of the distribution, somehow.

* have ssp_directory write a hash of the input
after termination of the command, add an option to overwrite, default
is not to simulate if the hash matches.

* the ssp tests have hardcoded paths to the neurospaces models in the scripts in tests/perl.

* add the mtn revision to the dist, somehow.

* Disable the tests that are dependent on neurospaces and heccer
If they are not installed.
