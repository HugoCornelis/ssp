#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#

use strict;


$| = 1;


BEGIN
{
    #! make check

    push @INC, '../perl';

    #! normal run

    push @INC, './perl';

    #! after install

    push @INC, '/usr/local/glue/swig/perl';
}


use Getopt::Long;

use SSP;

use YAML;


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


my $option_help;
my $option_neurospaces_models = '/local_home/local_home/hugo/neurospaces_project/neurospaces/source/c/snapshots/0/library';
my $option_transformator = "";
my $option_verbose;


sub apply_settings
{
    my $scheduler = shift;

    my $settings = shift;

    # loop over all services

    my $services = $scheduler->{services};

    foreach my $service_name (keys %$services)
    {
	my $service = $services->{$service_name};

	# if this is the neurospaces service

	if ($service->{module_name} eq 'Neurospaces')
	{
	    # if the library option is set

	    if (defined $option_neurospaces_models)
	    {
		# set the option for the service

		$service->{model_library} = $option_neurospaces_models;
	    }
	}
    }
}


sub main
{
    read_cmd_line();

    # loop over all configurations

    foreach my $configuration (@ARGV)
    {
	# if the configuration exists

	if (-e $configuration)
	{
	    # construct schedule from the configuration

	    local $/;

	    my $scheduler = Load(`cat $configuration`);

	    # apply the local settings

	    my $settings
		= {
		   neurospaces_models => $option_neurospaces_models,
		  };

	    apply_settings($scheduler, $settings);

	    # run the schedule

	    $scheduler->run( { verbosity => $option_verbose, }, );
	}
	else
	{
	    print STDERR "$0: configuration $configuration cannot be found\n";
	}
    }
}


sub read_cmd_line
{
    my $result
	= GetOptions
	    (
	     "help!" => \$option_help,
	     "neurospaces-models=s" => \$option_neurospaces_models,
	     "transformator=s" => \$option_transformator,
	     "v|verbose+" => \$option_verbose,
	    );

    if ($option_help
	|| !@ARGV)
    {
	print
	    "
$0 <configuration>

$0: run simulations, given an ssp configuration

options :
    help               print usage information.
    neurospaces-models directory where to find the neurospaces library
    transformator      feed the configuration through this transformator before running
    verbose            set verbosity level.
";

	exit 1;
    }

}


main();


exit 0;


