#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#

use strict;


$| = 1;


BEGIN
{
    #! make check

    push @INC, '../perl';

    #! make distcheck

    push @INC, '../../perl';

    #! normal run

    push @INC, './perl';

    #! after install

    push @INC, '/usr/local/glue/swig/perl';
}


use SwiggableHeccer;

use SSP;


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };

$ENV{NEUROSPACES_NMC_MODELS} = '/usr/local/neurospaces/models/library';


sub main
{
    # model specification array

    my $modelname = $0;

    $modelname =~ s/.*\///;

    $modelname =~ s/-/_/g;

    $modelname = 'singlep';

    my $args = [ "$0", "-P", "tests/cells/$modelname.ndf" ];

    # instantiate a scheduler

    my $scheduler
	= SSP->new(
		   {
		    apply => {
			      simulation => [
					     {
					      arguments => [ 100, { verbose => 1, }, ],
					      method => 'steps',
					     },
# 					     {
# 					      arguments => [ 0.1, ],
# 					      method => 'advance',
# 					     },
					    ],
			     },
		    models => [
			       {
				modelname => "/$modelname",
				granular_parameters => [
# 							{
# 							 component_name => "/$modelname/segments/c1",
# 							 field => 'INJECT',
# 							 value => 2e-9,	# 0,
# 							},
						       ],
				solverclass => "heccer",
			       },
			      ],
		    name => $modelname,
		    outputclasses => {
				      double_2_ascii => {
							 module_name => 'Experiment',
							 options => {
								     filename => "/tmp/output",
								     output_mode => 'steps',
								    },
							 package => 'Experiment::Output',
							},
				     },
		    outputs => [
				(
				 {
				  component_name => "/$modelname/segments/soma",
				  field => 'Vm',
				  outputclass => 'double_2_ascii',
				 },
				),
			       ],
		    services => {
				 model_container => {
						     initializers => [
								      {
								       arguments => [ $args, ],
								       method => 'read',
								      },
								     ],
						     module_name => 'Neurospaces',
						    },
				},
		    solverclasses => {
				      heccer => {
						 constructor_settings => {
									  dStep => (1e-5),
									 },
						 module_name => 'Heccer',
						 service_name => 'model_container',
						},
				     },
		   },
		  );

    use YAML;

    use IO::File;

#     my $configuration = IO::File->new(">./yaml/$modelname.yml");

    my $configuration = IO::File->new(">./yaml/output2.yml");

    if (defined $configuration)
    {
	print $configuration Dump($scheduler);

	$configuration->close();
    }

#     my $scheduler_yaml;

#     {
# 	local $/;

# 	if (-e "./yaml/$modelname.yml")
# 	{
# 	    $scheduler_yaml = Load(`cat ./yaml/$modelname.yml`);
# 	}
#     }

    # run the schedule

    $scheduler->run();

    system 'cat /tmp/output';
}


main();


exit 0;


