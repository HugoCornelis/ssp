#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#

use strict;


$| = 1;


BEGIN
{
    #! make check

    push @INC, '../perl';

    #! make distcheck

    push @INC, '../../perl';

    #! normal run

    push @INC, './perl';

    #! after install

    push @INC, '/usr/local/glue/swig/perl';
}


use SwiggableHeccer;

use SSP;


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };

$ENV{NEUROSPACES_NMC_MODELS} = '/usr/local/neurospaces/models/library';


sub main
{
    # model specification array

    my $modelname = $0;

    $modelname =~ s/.*\///;

    $modelname =~ s/-/_/g;

    my $args = [ "$0", "-P", "tests/cells/$modelname.ndf" ];

    # instantiate a scheduler

    my $scheduler
	= SSP->new(
		   {
		    apply => {
			      simulation => [
					     {
					      arguments => [ 2500, { verbose => 2, }, ],
					      method => 'steps',
					     },
# 					     {
# 					      arguments => [ 0.1, ],
# 					      method => 'advance',
# 					     },
					    ],
			     },
		    models => [
			       {
				modelname => "/$modelname",
				granular_parameters => [
							{
							 component_name => "/$modelname/segments/soma",
							 field => 'INJECT',
							 value => 2e-9,  # 0,
							},
						       ],
				solverclass => "heccer",
			       },
			      ],
		    name => $modelname,
		    outputclasses => {
				      double_2_ascii => {
							 module_name => 'Heccer',
							 options => {
								     filename => "/tmp/output",
								    },
							 package => 'Heccer::Output',
							},
				     },
		    outputs => [
				(
				 {
				  component_name => "/$modelname/segments/soma",
				  field => 'Vm',
				  outputclass => 'double_2_ascii',
				 },
				 !$ARGV[0]
				 ? (
				    {
				     component_name => "/$modelname/segments/soma/ca_pool",
				     field => 'Ca',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/km",
				     field => 'state_n',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/kdr",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/kdr",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/ka",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/ka",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/kh",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/kh",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/nap",
				     field => 'state_n',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/naf",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/naf",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/cat/cat_gate_activation",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/soma/cat/cat_gate_inactivation",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				   )
				 : (),
				),
				(
				 {
				  component_name => "/$modelname/segments/main[0]",
				  field => 'Vm',
				  outputclass => 'double_2_ascii',
				 },
				 !$ARGV[0]
				 ? (
				    {
				     component_name => "/$modelname/segments/main[0]/ca_pool",
				     field => 'Ca',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/cat/cat_gate_activation",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/cat/cat_gate_inactivation",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/cap/cap_gate_activation",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/cap/cap_gate_inactivation",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/km",
				     field => 'state_n',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/kdr",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/kdr",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/ka",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/ka",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/kc",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/kc",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/k2",
				     field => 'state_m',
				     outputclass => 'double_2_ascii',
				    },
				    {
				     component_name => "/$modelname/segments/main[0]/k2",
				     field => 'state_h',
				     outputclass => 'double_2_ascii',
				    },
				   )
				 : (),
				),
			       ],
		    services => {
				 neurospaces => {
						 initializers => [
								  {
								   arguments => [ $args, ],
								   method => 'read',
								  },
								 ],
						 module_name => 'Neurospaces',
						},
				},
		    solverclasses => {
				      heccer => {
						 constructor_settings => {
									  dStep => (2e-5),
									  configuration => {
											    reporting => {
													  granularity => 1000,
													  tested_things => (
															    $SwiggableHeccer::HECCER_DUMP_VM_COMPARTMENT_MATRIX
															    | $SwiggableHeccer::HECCER_DUMP_VM_COMPARTMENT_DATA
															    | $SwiggableHeccer::HECCER_DUMP_VM_COMPARTMENT_OPERATIONS
															    | $SwiggableHeccer::HECCER_DUMP_VM_MECHANISM_DATA
															    | $SwiggableHeccer::HECCER_DUMP_VM_MECHANISM_OPERATIONS
															    | $SwiggableHeccer::HECCER_DUMP_VM_SUMMARY
															   ),
													 },
											   },
									  $ARGV[0]
									  ? (
									     options => {
											 iOptions => (
												      $SwiggableHeccer::HECCER_OPTION_PASSIVE_SYNCHANS
												     ),
											},
									    )
									  : (),
									 },
						 module_name => 'Heccer',
						 service_name => 'neurospaces',
						},
				     },
		   },
		  );

    use YAML;

    use IO::File;

    my $configuration = IO::File->new(">./yaml/$modelname.yml");

    if (defined $configuration)
    {
	print $configuration Dump($scheduler);

	$configuration->close();
    }

    my $scheduler_yaml;

    {
	local $/;

	if (-e "./yaml/$modelname.yml")
	{
	    $scheduler_yaml = Load(`cat ./yaml/$modelname.yml`);
	}
    }

    # run the schedule

    $scheduler->run();
}


main();


exit 0;


