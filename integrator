#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#

use strict;


$| = 1;


BEGIN
{
    push @INC, '.';

    push @INC, '/usr/local/glue/swig/perl';
}


use Data::Dumper;

use Heccer;

use Neurospaces;


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };

$ENV{NEUROSPACES_MODELS} = '/local_home/local_home/hugo/neurospaces_project/neurospaces/source/c/snapshots/0/library';


sub main
{
    # construct a translation service

    my $neurospaces = Neurospaces->new();

    # read a model

    my $args = [ "$0", "-P", "tests/cells/tensizesp.ndf" ];

    my $success = $neurospaces->read($#$args + 1, $args);

    # instantiate a scheduler

    my $scheduler
	= SSP->new(
		   {
		    models => [
			       {
				modelname => "/tensizesp",
				solverclass => "Heccer",
			       },
			      ],
		    service => SSP::Service->new(
						 {
						  backend => $neurospaces,
						 },
						),
		    solverclasses => {
				      Heccer => {
						 service_name => 'neurospaces',
						},
				     },
		   },
		  );

    # compile the schedule

    my $setup = $scheduler->compile();

    if (!$setup)
    {
	die "Failed to compile a schedule";
    }

    my $initiated = $scheduler->initiate();

    if (!$initiated)
    {
	die "Failed to initiate the schedule";
    }

    # advance the time

#     $scheduler->advance(0.1);

    # or do a number of steps

    $scheduler->steps(10, 1);
}


main();


exit 0;


# packages below

package SSP;


sub advance
{
    my $self = shift;

    my $time = shift;

    my $verbose = shift;

    # set default result : ok

    my $result = 1;

    # loop over all schedulees

    my $schedule = $self->{schedule};

    foreach my $schedulee (@$schedule)
    {
	# advance the engine

	my $error = $schedulee->advance($time, $verbose);

	if ($error)
	{
	    die "Scheduling for $time failed";
	}
    }

    # return result

    return $result;
}


sub compile
{
    my $self = shift;

    # set default result : ok

    my $result = 1;

    # construct a schedule

    my $schedule = $self->{schedule} || [];

    # loop over all models

    my $models = $self->{models};

    foreach my $model (@$models)
    {
	# instantiate a schedulee

	my $modelname = $model->{modelname};

	my $solverclass = $model->{solverclass};

	my $service = $self->{service};

	my $engine = SSP::Engine->new($solverclass, $service, $modelname);

	# compile the model

	if (!$engine->compile($self))
	{
	    return 0;
	}

	# register the schedulee in the schedule

	push @$schedule, $engine;
    }

    # register the schedule

    $self->{schedule} = $schedule;

    # return result

    return $result;
}


sub initiate
{
    my $self = shift;

    # set default result : ok

    my $result = 1;

    # loop over all schedulees

    my $schedule = $self->{schedule};

    foreach my $schedulee (@$schedule)
    {
	# advance the engine

	my $success = $schedulee->initiate();

	if (!$success)
	{
	    die "Initiation failed";
	}
    }

    # return result

    return $result;
}


sub new
{
    my $package = shift;

    my $options = shift;

    my $self
	= {
	   %$options,
	  };

    bless $self, $package;

    return $self;
}


sub steps
{
    my $self = shift;

    my $steps = shift;

    my $verbose = shift;

    # set default result : ok

    my $result = 1;

    # loop over all schedulees

    my $schedule = $self->{schedule};

    foreach my $schedulee (@$schedule)
    {
	# advance the engine

	my $error = $schedulee->steps($steps, $verbose);

	if ($error)
	{
	    die "Scheduling for $steps failed";
	}
    }

    # return result

    return $result;
}


package SSP::Glue;



sub backend
{
    my $self = shift;

    return $self->{backend};
}


package SSP::Engine;


BEGIN { our @ISA = qw(SSP::Glue); }


sub advance
{
    my $self = shift;

    my $time = shift;

    # set result : ok

    my $result;

    my $backend = $self->backend();

    my $success = $backend->advance($time);

    if (!$success)
    {
	$result = "HeccerHeccs() failed";
    }

    # return result

    return $result;
}


sub compile
{
    my $self = shift;

    my $scheduler = shift;

    # set default result : ok

    my $result = 1;

    #t do better error checking for this method

    # construct an engine for this model

    my $modelname = $self->{modelname};

    my $solverclass = $self->{solverclass};

    my $constructor = $scheduler->{solverclasses}->{$solverclass}->{constructor};

    my $service_name = $scheduler->{solverclasses}->{$solverclass}->{service_name};

    my $service = $self->{service};

    my $service_backend = $service->backend();

    my $engine;

    {
	no strict "refs";

	$engine
	    = $solverclass->new
		(
		 {
		  constructor => $constructor,
		  service_name => $service_name,
		  service_backend => $service_backend,
		  modelname => $modelname,
		 },
		);

# 	$engine = &$constructor($service_backend, $modelname);
    }

    # register the engine with the schedulee

    $self->{backend} = $engine;

    $result = $engine->compile();

    # return result

    return $result;
}


sub initiate
{
    my $self = shift;

    my $backend = $self->backend();

    my $result = $backend->initiate();

    return $result;
}


sub new
{
    my $package = shift;

    my $solverclass = shift;

    my $service = shift;

    my $modelname = shift;

    my $self
	= {
	   modelname => $modelname,
	   service => $service,
	   solverclass => $solverclass,
	  };

    bless $self, $package;

    return $self;
}


sub steps
{
    my $self = shift;

    my $steps = shift;

    my $verbose = shift;

    # set result : ok

    my $result;

    # initial dump

    $verbose && print "Initiated\n";

    my $backend = $self->backend();

    $verbose && $backend->dump($Heccer::config->{tested_things});

    # a couple of times

    my $final_report = 0;

    foreach my $i (0 .. $steps - 1)
    {
	# step

	my $success = $backend->step();

	if (!$success)
	{
	    $result = "HeccerHecc() failed";
	}

	if (($i % ($Heccer::config->{reporting_granularity})) == 0)
	{
	    # dump

	    $verbose && print "-------\n";

	    $verbose && print "Iteration $i\n";

	    $verbose && $backend->dump(undef, $Heccer::config->{tested_things});
	}
	else
	{
	    $final_report = 1;
	}
    }

    if ($final_report)
    {
	$verbose && print "-------\n";

	$verbose && print "Iteration " . ($Heccer::config->{steps}) . "\n";

	$verbose && $backend->dump(undef, $Heccer::config->{tested_things});
    }

    # return result

    return $result;
}


package SSP::Service;


BEGIN { our @ISA = qw(SSP::Glue); }


sub new
{
    my $package = shift;

    my $options = shift;

    my $self = { %$options, };

    bless $self, $package;

    return $self;
}


